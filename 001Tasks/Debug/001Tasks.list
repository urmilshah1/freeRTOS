
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d50  08003d50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000169ac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20016a24  20016a24  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105c5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261a  00000000  00000000  0003066d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022da8  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eae7  00000000  00000000  00057398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f44  00000000  00000000  00065e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137dc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c88  00000000  00000000  00137e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c84 	.word	0x08003c84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003c84 	.word	0x08003c84

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbf3 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f843 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8ab 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status =  xTaskCreate(task1_handler, "Task-1",200, "Hello World 1", 1, &task1_handle);
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2301      	movs	r3, #1
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <main+0x80>)
 80004e6:	22c8      	movs	r2, #200	; 0xc8
 80004e8:	4918      	ldr	r1, [pc, #96]	; (800054c <main+0x84>)
 80004ea:	4819      	ldr	r0, [pc, #100]	; (8000550 <main+0x88>)
 80004ec:	f001 fe55 	bl	800219a <xTaskCreate>
 80004f0:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d00a      	beq.n	800050e <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fc:	f383 8811 	msr	BASEPRI, r3
 8000500:	f3bf 8f6f 	isb	sy
 8000504:	f3bf 8f4f 	dsb	sy
 8000508:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800050a:	bf00      	nop
 800050c:	e7fe      	b.n	800050c <main+0x44>

  status =  xTaskCreate(task2_handler, "Task-1",200, "Hello World 2", 1, &task2_handle);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <main+0x8c>)
 8000518:	22c8      	movs	r2, #200	; 0xc8
 800051a:	490c      	ldr	r1, [pc, #48]	; (800054c <main+0x84>)
 800051c:	480e      	ldr	r0, [pc, #56]	; (8000558 <main+0x90>)
 800051e:	f001 fe3c 	bl	800219a <xTaskCreate>
 8000522:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d00a      	beq.n	8000540 <main+0x78>
        __asm volatile
 800052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052e:	f383 8811 	msr	BASEPRI, r3
 8000532:	f3bf 8f6f 	isb	sy
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	60fb      	str	r3, [r7, #12]
    }
 800053c:	bf00      	nop
 800053e:	e7fe      	b.n	800053e <main+0x76>


  //Call to start the freeRTOS scheduler

  vTaskStartScheduler();
 8000540:	f001 ff88 	bl	8002454 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x7c>
 8000546:	bf00      	nop
 8000548:	08003c9c 	.word	0x08003c9c
 800054c:	08003cac 	.word	0x08003cac
 8000550:	080008ed 	.word	0x080008ed
 8000554:	08003cb4 	.word	0x08003cb4
 8000558:	08000911 	.word	0x08000911

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 febc 	bl	80032e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d0:	2332      	movs	r3, #50	; 0x32
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fe43 	bl	800126c <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 f9b4 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f8a4 	bl	800175c <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 f99d 	bl	8000958 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	; 0x30
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	4ba2      	ldr	r3, [pc, #648]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4aa1      	ldr	r2, [pc, #644]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 8000650:	f043 0310 	orr.w	r3, r3, #16
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b9f      	ldr	r3, [pc, #636]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0310 	and.w	r3, r3, #16
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	4b9b      	ldr	r3, [pc, #620]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a9a      	ldr	r2, [pc, #616]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b98      	ldr	r3, [pc, #608]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b94      	ldr	r3, [pc, #592]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a93      	ldr	r2, [pc, #588]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b91      	ldr	r3, [pc, #580]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b8d      	ldr	r3, [pc, #564]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a8c      	ldr	r2, [pc, #560]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b8a      	ldr	r3, [pc, #552]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b86      	ldr	r3, [pc, #536]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a85      	ldr	r2, [pc, #532]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b83      	ldr	r3, [pc, #524]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b7f      	ldr	r3, [pc, #508]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a7e      	ldr	r2, [pc, #504]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b7c      	ldr	r3, [pc, #496]	; (80008d4 <MX_GPIO_Init+0x2a4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2108      	movs	r1, #8
 80006f2:	4879      	ldr	r0, [pc, #484]	; (80008d8 <MX_GPIO_Init+0x2a8>)
 80006f4:	f000 fda0 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	4877      	ldr	r0, [pc, #476]	; (80008dc <MX_GPIO_Init+0x2ac>)
 80006fe:	f000 fd9b 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000702:	2200      	movs	r2, #0
 8000704:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000708:	4875      	ldr	r0, [pc, #468]	; (80008e0 <MX_GPIO_Init+0x2b0>)
 800070a:	f000 fd95 	bl	8001238 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800070e:	2308      	movs	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	486c      	ldr	r0, [pc, #432]	; (80008d8 <MX_GPIO_Init+0x2a8>)
 8000726:	f000 fbeb 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800072a:	2301      	movs	r3, #1
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4866      	ldr	r0, [pc, #408]	; (80008dc <MX_GPIO_Init+0x2ac>)
 8000742:	f000 fbdd 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000746:	2308      	movs	r3, #8
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000756:	2305      	movs	r3, #5
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	485e      	ldr	r0, [pc, #376]	; (80008dc <MX_GPIO_Init+0x2ac>)
 8000762:	f000 fbcd 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	2301      	movs	r3, #1
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	485a      	ldr	r0, [pc, #360]	; (80008e4 <MX_GPIO_Init+0x2b4>)
 800077c:	f000 fbc0 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000780:	2310      	movs	r3, #16
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000790:	2306      	movs	r3, #6
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4852      	ldr	r0, [pc, #328]	; (80008e4 <MX_GPIO_Init+0x2b4>)
 800079c:	f000 fbb0 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a0:	23e0      	movs	r3, #224	; 0xe0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b0:	2305      	movs	r3, #5
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484a      	ldr	r0, [pc, #296]	; (80008e4 <MX_GPIO_Init+0x2b4>)
 80007bc:	f000 fba0 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c0:	2304      	movs	r3, #4
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4845      	ldr	r0, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x2b8>)
 80007d4:	f000 fb94 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ea:	2305      	movs	r3, #5
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	483c      	ldr	r0, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x2b8>)
 80007f6:	f000 fb83 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4833      	ldr	r0, [pc, #204]	; (80008e0 <MX_GPIO_Init+0x2b0>)
 8000814:	f000 fb74 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000818:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082a:	2306      	movs	r3, #6
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4829      	ldr	r0, [pc, #164]	; (80008dc <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb63 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800083a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4825      	ldr	r0, [pc, #148]	; (80008e4 <MX_GPIO_Init+0x2b4>)
 8000850:	f000 fb56 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000854:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000866:	230a      	movs	r3, #10
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	; (80008e4 <MX_GPIO_Init+0x2b4>)
 8000872:	f000 fb45 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000876:	2320      	movs	r3, #32
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4815      	ldr	r0, [pc, #84]	; (80008e0 <MX_GPIO_Init+0x2b0>)
 800088a:	f000 fb39 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800088e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000894:	2312      	movs	r3, #18
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a0:	2304      	movs	r3, #4
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	480f      	ldr	r0, [pc, #60]	; (80008e8 <MX_GPIO_Init+0x2b8>)
 80008ac:	f000 fb28 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0x2a8>)
 80008c6:	f000 fb1b 	bl	8000f00 <HAL_GPIO_Init>

}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020400 	.word	0x40020400

080008ec <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f002 fd6d 	bl	80033d4 <puts>
		taskYIELD();
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <task1_handler+0x20>)
 80008fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	f3bf 8f4f 	dsb	sy
 8000906:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800090a:	e7f3      	b.n	80008f4 <task1_handler+0x8>
 800090c:	e000ed04 	.word	0xe000ed04

08000910 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f002 fd5b 	bl	80033d4 <puts>
		taskYIELD();
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <task2_handler+0x20>)
 8000920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800092e:	e7f3      	b.n	8000918 <task2_handler+0x8>
 8000930:	e000ed04 	.word	0xe000ed04

08000934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000946:	f000 f9d9 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40001000 	.word	0x40001000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2036      	movs	r0, #54	; 0x36
 80009ca:	f000 fa6f 	bl	8000eac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ce:	2036      	movs	r0, #54	; 0x36
 80009d0:	f000 fa88 	bl	8000ee4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <HAL_InitTick+0xa4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <HAL_InitTick+0xa4>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <HAL_InitTick+0xa4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f0:	f107 0210 	add.w	r2, r7, #16
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f896 	bl	8001b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a00:	f001 f880 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8000a04:	4603      	mov	r3, r0
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <HAL_InitTick+0xa8>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3b01      	subs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_InitTick+0xac>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <HAL_InitTick+0xb0>)
 8000a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_InitTick+0xac>)
 8000a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_InitTick+0xac>)
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_InitTick+0xac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_InitTick+0xac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <HAL_InitTick+0xac>)
 8000a3a:	f001 f8a9 	bl	8001b90 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d104      	bne.n	8000a4e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <HAL_InitTick+0xac>)
 8000a46:	f001 f8fd 	bl	8001c44 <HAL_TIM_Base_Start_IT>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	200169c8 	.word	0x200169c8
 8000a64:	40001000 	.word	0x40001000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM6_DAC_IRQHandler+0x10>)
 8000a9a:	f001 f943 	bl	8001d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200169c8 	.word	0x200169c8

08000aa8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <ITM_SendChar+0x48>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <ITM_SendChar+0x48>)
 8000ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000abc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <ITM_SendChar+0x4c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <ITM_SendChar+0x4c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000aca:	bf00      	nop
 8000acc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f8      	beq.n	8000acc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ada:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	6013      	str	r3, [r2, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000edfc 	.word	0xe000edfc
 8000af4:	e0000e00 	.word	0xe0000e00

08000af8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
	}

return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e009      	b.n	8000b58 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffab 	bl	8000aa8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf1      	blt.n	8000b44 <_write+0x12>
	}
	return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_close>:

int _close(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	return -1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b92:	605a      	str	r2, [r3, #4]
	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_isatty>:

int _isatty(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f002 fb46 	bl	8003294 <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	20000094 	.word	0x20000094
 8000c3c:	20016a28 	.word	0x20016a28

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f002 fb05 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc17 	bl	80004c8 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ca8:	08003d58 	.word	0x08003d58
  ldr r2, =_sbss
 8000cac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cb0:	20016a24 	.word	0x20016a24

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8d8 	bl	8000e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fe64 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe3a 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20016a10 	.word	0x20016a10

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20016a10 	.word	0x20016a10

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff4c 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebe:	f7ff ff61 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	6978      	ldr	r0, [r7, #20]
 8000eca:	f7ff ffb1 	bl	8000e30 <NVIC_EncodePriority>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff80 	bl	8000ddc <__NVIC_SetPriority>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff54 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e16b      	b.n	80011f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 815a 	bne.w	80011ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d017      	beq.n	8000ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80b4 	beq.w	80011ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b60      	ldr	r3, [pc, #384]	; (800120c <HAL_GPIO_Init+0x30c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a5f      	ldr	r2, [pc, #380]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a5b      	ldr	r2, [pc, #364]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d02b      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x320>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x324>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x328>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x32c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x20a>
 8001106:	2307      	movs	r3, #7
 8001108:	e00e      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110a:	2308      	movs	r3, #8
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110e:	2306      	movs	r3, #6
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4935      	ldr	r1, [pc, #212]	; (8001210 <HAL_GPIO_Init+0x310>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x334>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x334>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f ae90 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e264      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d075      	beq.n	8001376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128a:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d00c      	beq.n	80012b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d112      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4b9d      	ldr	r3, [pc, #628]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b99      	ldr	r3, [pc, #612]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d05b      	beq.n	8001374 <HAL_RCC_OscConfig+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d157      	bne.n	8001374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e23f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x74>
 80012d2:	4b91      	ldr	r3, [pc, #580]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a90      	ldr	r2, [pc, #576]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01d      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a8a      	ldr	r2, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 8001304:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a83      	ldr	r2, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a80      	ldr	r2, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fcfe 	bl	8000d24 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fcfa 	bl	8000d24 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e204      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0xc0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fcea 	bl	8000d24 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fce6 	bl	8000d24 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1f0      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0xe8>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d063      	beq.n	800144a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d11c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e1c4      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4952      	ldr	r1, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	e03a      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013dc:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc9f 	bl	8000d24 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fc9b 	bl	8000d24 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1a5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4940      	ldr	r1, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc7e 	bl	8000d24 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fc7a 	bl	8000d24 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e184      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fc5e 	bl	8000d24 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fc5a 	bl	8000d24 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e164      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x200>
 800148a:	e015      	b.n	80014b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fc47 	bl	8000d24 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fc43 	bl	8000d24 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e14d      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a0 	beq.w	8001606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d121      	bne.n	8001546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc09 	bl	8000d24 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e011      	b.n	800153a <HAL_RCC_OscConfig+0x2ce>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
 8001524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff fbfc 	bl	8000d24 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e106      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b85      	ldr	r3, [pc, #532]	; (8001750 <HAL_RCC_OscConfig+0x4e4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x2f0>
 800154e:	4b81      	ldr	r3, [pc, #516]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a80      	ldr	r2, [pc, #512]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001564:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800157e:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a74      	ldr	r2, [pc, #464]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fbc1 	bl	8000d24 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fbbd 	bl	8000d24 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0c5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x33a>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbab 	bl	8000d24 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fba7 	bl	8000d24 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0af      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a55      	ldr	r2, [pc, #340]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 809b 	beq.w	8001746 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d05c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d141      	bne.n	80016a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb7b 	bl	8000d24 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb77 	bl	8000d24 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e081      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	019b      	lsls	r3, r3, #6
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	3b01      	subs	r3, #1
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb50 	bl	8000d24 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb4c 	bl	8000d24 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e056      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x41c>
 80016a6:	e04e      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb39 	bl	8000d24 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fb35 	bl	8000d24 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e03f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x44a>
 80016d4:	e037      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e032      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d028      	beq.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d121      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d11a      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001718:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171a:	4293      	cmp	r3, r2
 800171c:	d111      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40007000 	.word	0x40007000
 8001754:	40023800 	.word	0x40023800
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0cc      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d90c      	bls.n	8001798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d044      	beq.n	800187c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d119      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	2b03      	cmp	r3, #3
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e067      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4934      	ldr	r1, [pc, #208]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800184c:	f7ff fa6a 	bl	8000d24 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff fa66 	bl	8000d24 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d20c      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f856 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	08003ccc 	.word	0x08003ccc
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d00d      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x40>
 800194c:	2b08      	cmp	r3, #8
 800194e:	f200 80bd 	bhi.w	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x34>
 8001956:	2b04      	cmp	r3, #4
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x3a>
 800195a:	e0b7      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800195e:	60bb      	str	r3, [r7, #8]
       break;
 8001960:	e0b7      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001962:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001964:	60bb      	str	r3, [r7, #8]
      break;
 8001966:	e0b4      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04d      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	461a      	mov	r2, r3
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	ea02 0800 	and.w	r8, r2, r0
 8001996:	ea03 0901 	and.w	r9, r3, r1
 800199a:	4640      	mov	r0, r8
 800199c:	4649      	mov	r1, r9
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	014b      	lsls	r3, r1, #5
 80019a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ac:	0142      	lsls	r2, r0, #5
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	ebb0 0008 	subs.w	r0, r0, r8
 80019b6:	eb61 0109 	sbc.w	r1, r1, r9
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c8:	0182      	lsls	r2, r0, #6
 80019ca:	1a12      	subs	r2, r2, r0
 80019cc:	eb63 0301 	sbc.w	r3, r3, r1
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	00d9      	lsls	r1, r3, #3
 80019da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019de:	00d0      	lsls	r0, r2, #3
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	eb12 0208 	adds.w	r2, r2, r8
 80019e8:	eb43 0309 	adc.w	r3, r3, r9
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0259      	lsls	r1, r3, #9
 80019f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019fa:	0250      	lsls	r0, r2, #9
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f7fe fbe0 	bl	80001d0 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e04a      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	461a      	mov	r2, r3
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	ea02 0400 	and.w	r4, r2, r0
 8001a32:	ea03 0501 	and.w	r5, r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	014b      	lsls	r3, r1, #5
 8001a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a48:	0142      	lsls	r2, r0, #5
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	1b00      	subs	r0, r0, r4
 8001a50:	eb61 0105 	sbc.w	r1, r1, r5
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	018b      	lsls	r3, r1, #6
 8001a5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a62:	0182      	lsls	r2, r0, #6
 8001a64:	1a12      	subs	r2, r2, r0
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	00d9      	lsls	r1, r3, #3
 8001a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a78:	00d0      	lsls	r0, r2, #3
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	1912      	adds	r2, r2, r4
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	0299      	lsls	r1, r3, #10
 8001a8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a92:	0290      	lsls	r0, r2, #10
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	f7fe fb94 	bl	80001d0 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	3301      	adds	r3, #1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	60bb      	str	r3, [r7, #8]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ace:	60bb      	str	r3, [r7, #8]
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08003cdc 	.word	0x08003cdc

08001b2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	220f      	movs	r2, #15
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_RCC_GetClockConfig+0x60>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0207 	and.w	r2, r3, #7
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f839 	bl	8001c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 f9d8 	bl	8001f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04e      	b.n	8001cfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d022      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d01d      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d013      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d010      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	e007      	b.n	8001cf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40010400 	.word	0x40010400
 8001d1c:	40014000 	.word	0x40014000
 8001d20:	40001800 	.word	0x40001800

08001d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d122      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d11b      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0202 	mvn.w	r2, #2
 8001d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8ee 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8e0 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8f1 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d122      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0204 	mvn.w	r2, #4
 8001da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8c4 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8b6 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8c7 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0208 	mvn.w	r2, #8
 8001df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f89a 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f88c 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f89d 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0210 	mvn.w	r2, #16
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2208      	movs	r2, #8
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f870 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f862 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f873 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0201 	mvn.w	r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fd46 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b80      	cmp	r3, #128	; 0x80
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f902 	bl	80020d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f838 	bl	8001f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0220 	mvn.w	r2, #32
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8cc 	bl	80020c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d00f      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <TIM_Base_SetConfig+0x118>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3c      	ldr	r2, [pc, #240]	; (80020a0 <TIM_Base_SetConfig+0x11c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <TIM_Base_SetConfig+0x120>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d027      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <TIM_Base_SetConfig+0x118>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d023      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	; (80020a0 <TIM_Base_SetConfig+0x11c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <TIM_Base_SetConfig+0x120>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d017      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a28      	ldr	r2, [pc, #160]	; (80020ac <TIM_Base_SetConfig+0x128>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <TIM_Base_SetConfig+0x12c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <TIM_Base_SetConfig+0x130>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <TIM_Base_SetConfig+0x134>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <TIM_Base_SetConfig+0x138>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <TIM_Base_SetConfig+0x13c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0xf8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d103      	bne.n	8002084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40000c00 	.word	0x40000c00
 80020a8:	40010400 	.word	0x40010400
 80020ac:	40014000 	.word	0x40014000
 80020b0:	40014400 	.word	0x40014400
 80020b4:	40014800 	.word	0x40014800
 80020b8:	40001800 	.word	0x40001800
 80020bc:	40001c00 	.word	0x40001c00
 80020c0:	40002000 	.word	0x40002000

080020c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f103 0208 	add.w	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f103 0208 	add.w	r2, r3, #8
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 0208 	add.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6892      	ldr	r2, [r2, #8]
 800215c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6852      	ldr	r2, [r2, #4]
 8002166:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d103      	bne.n	800217a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800219a:	b580      	push	{r7, lr}
 800219c:	b08c      	sub	sp, #48	; 0x30
 800219e:	af04      	add	r7, sp, #16
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fea4 	bl	8002efc <pvPortMalloc>
 80021b4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021bc:	2058      	movs	r0, #88	; 0x58
 80021be:	f000 fe9d 	bl	8002efc <pvPortMalloc>
 80021c2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80021ca:	2258      	movs	r2, #88	; 0x58
 80021cc:	2100      	movs	r1, #0
 80021ce:	69f8      	ldr	r0, [r7, #28]
 80021d0:	f001 f88a 	bl	80032e8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
 80021da:	e005      	b.n	80021e8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f000 ff47 	bl	8003070 <vPortFree>
 80021e2:	e001      	b.n	80021e8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d013      	beq.n	8002216 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9303      	str	r3, [sp, #12]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f80e 	bl	8002226 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800220a:	69f8      	ldr	r0, [r7, #28]
 800220c:	f000 f89a 	bl	8002344 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002210:	2301      	movs	r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e002      	b.n	800221c <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800221c:	69bb      	ldr	r3, [r7, #24]
    }
 800221e:	4618      	mov	r0, r3
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b088      	sub	sp, #32
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	461a      	mov	r2, r3
 800223e:	21a5      	movs	r1, #165	; 0xa5
 8002240:	f001 f852 	bl	80032e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800224e:	3b01      	subs	r3, #1
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f023 0307 	bic.w	r3, r3, #7
 800225c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	617b      	str	r3, [r7, #20]
    }
 800227a:	bf00      	nop
 800227c:	e7fe      	b.n	800227c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01e      	beq.n	80022c2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	e012      	b.n	80022b0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	7819      	ldrb	r1, [r3, #0]
 8002292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	3334      	adds	r3, #52	; 0x34
 800229a:	460a      	mov	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3301      	adds	r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b09      	cmp	r3, #9
 80022b4:	d9e9      	bls.n	800228a <prvInitialiseNewTask+0x64>
 80022b6:	e000      	b.n	80022ba <prvInitialiseNewTask+0x94>
            {
                break;
 80022b8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d90a      	bls.n	80022de <prvInitialiseNewTask+0xb8>
        __asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	613b      	str	r3, [r7, #16]
    }
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d901      	bls.n	80022e8 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022e4:	2304      	movs	r3, #4
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f2:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	3304      	adds	r3, #4
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff17 	bl	800212c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	3318      	adds	r3, #24
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff12 	bl	800212c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	f1c3 0205 	rsb	r2, r3, #5
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	69b8      	ldr	r0, [r7, #24]
 8002324:	f000 fbda 	bl	8002adc <pxPortInitialiseStack>
 8002328:	4602      	mov	r2, r0
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002338:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800233a:	bf00      	nop
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800234c:	f000 fcf4 	bl	8002d38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <prvAddNewTaskToReadyList+0xf8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	4a39      	ldr	r2, [pc, #228]	; (800243c <prvAddNewTaskToReadyList+0xf8>)
 8002358:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <prvAddNewTaskToReadyList+0xfc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <prvAddNewTaskToReadyList+0xfc>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002368:	4b34      	ldr	r3, [pc, #208]	; (800243c <prvAddNewTaskToReadyList+0xf8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d110      	bne.n	8002392 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002370:	f000 fb1a 	bl	80029a8 <prvInitialiseTaskLists>
 8002374:	e00d      	b.n	8002392 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002376:	4b33      	ldr	r3, [pc, #204]	; (8002444 <prvAddNewTaskToReadyList+0x100>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <prvAddNewTaskToReadyList+0xfc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	429a      	cmp	r2, r3
 800238a:	d802      	bhi.n	8002392 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800238c:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <prvAddNewTaskToReadyList+0xfc>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <prvAddNewTaskToReadyList+0x104>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <prvAddNewTaskToReadyList+0x104>)
 800239a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <prvAddNewTaskToReadyList+0x104>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <prvAddNewTaskToReadyList+0x108>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	4a26      	ldr	r2, [pc, #152]	; (800244c <prvAddNewTaskToReadyList+0x108>)
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ba:	4925      	ldr	r1, [pc, #148]	; (8002450 <prvAddNewTaskToReadyList+0x10c>)
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3304      	adds	r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	3204      	adds	r2, #4
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4a15      	ldr	r2, [pc, #84]	; (8002450 <prvAddNewTaskToReadyList+0x10c>)
 80023fa:	441a      	add	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	615a      	str	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	4912      	ldr	r1, [pc, #72]	; (8002450 <prvAddNewTaskToReadyList+0x10c>)
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1c59      	adds	r1, r3, #1
 8002414:	480e      	ldr	r0, [pc, #56]	; (8002450 <prvAddNewTaskToReadyList+0x10c>)
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002422:	f000 fcb9 	bl	8002d98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <prvAddNewTaskToReadyList+0x100>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <prvAddNewTaskToReadyList+0xfc>)
 8002430:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000170 	.word	0x20000170
 8002440:	20000098 	.word	0x20000098
 8002444:	2000017c 	.word	0x2000017c
 8002448:	2000018c 	.word	0x2000018c
 800244c:	20000178 	.word	0x20000178
 8002450:	2000009c 	.word	0x2000009c

08002454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <vTaskStartScheduler+0x7c>)
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2282      	movs	r2, #130	; 0x82
 8002466:	491b      	ldr	r1, [pc, #108]	; (80024d4 <vTaskStartScheduler+0x80>)
 8002468:	481b      	ldr	r0, [pc, #108]	; (80024d8 <vTaskStartScheduler+0x84>)
 800246a:	f7ff fe96 	bl	800219a <xTaskCreate>
 800246e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d116      	bne.n	80024a4 <vTaskStartScheduler+0x50>
        __asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	60bb      	str	r3, [r7, #8]
    }
 8002488:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <vTaskStartScheduler+0x88>)
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <vTaskStartScheduler+0x8c>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <vTaskStartScheduler+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800249e:	f000 fba9 	bl	8002bf4 <xPortStartScheduler>
 80024a2:	e00e      	b.n	80024c2 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d10a      	bne.n	80024c2 <vTaskStartScheduler+0x6e>
        __asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	607b      	str	r3, [r7, #4]
    }
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <vTaskStartScheduler+0x94>)
 80024c4:	681b      	ldr	r3, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000194 	.word	0x20000194
 80024d4:	08003cc4 	.word	0x08003cc4
 80024d8:	08002985 	.word	0x08002985
 80024dc:	20000190 	.word	0x20000190
 80024e0:	2000017c 	.word	0x2000017c
 80024e4:	20000174 	.word	0x20000174
 80024e8:	2000000c 	.word	0x2000000c

080024ec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <vTaskSuspendAll+0x18>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	4a03      	ldr	r2, [pc, #12]	; (8002504 <vTaskSuspendAll+0x18>)
 80024f8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000198 	.word	0x20000198

08002508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002516:	4b6b      	ldr	r3, [pc, #428]	; (80026c4 <xTaskResumeAll+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <xTaskResumeAll+0x2c>
        __asm volatile
 800251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	607b      	str	r3, [r7, #4]
    }
 8002530:	bf00      	nop
 8002532:	e7fe      	b.n	8002532 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002534:	f000 fc00 	bl	8002d38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002538:	4b62      	ldr	r3, [pc, #392]	; (80026c4 <xTaskResumeAll+0x1bc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3b01      	subs	r3, #1
 800253e:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <xTaskResumeAll+0x1bc>)
 8002540:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002542:	4b60      	ldr	r3, [pc, #384]	; (80026c4 <xTaskResumeAll+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80b4 	bne.w	80026b4 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <xTaskResumeAll+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80af 	beq.w	80026b4 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002556:	e08a      	b.n	800266e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002558:	4b5c      	ldr	r3, [pc, #368]	; (80026cc <xTaskResumeAll+0x1c4>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	6a12      	ldr	r2, [r2, #32]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	69d2      	ldr	r2, [r2, #28]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3318      	adds	r3, #24
 8002582:	429a      	cmp	r2, r3
 8002584:	d103      	bne.n	800258e <xTaskResumeAll+0x86>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	6a1a      	ldr	r2, [r3, #32]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	68d2      	ldr	r2, [r2, #12]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3304      	adds	r3, #4
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d103      	bne.n	80025cc <xTaskResumeAll+0xc4>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2201      	movs	r2, #1
 80025e2:	409a      	lsls	r2, r3
 80025e4:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <xTaskResumeAll+0x1c8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	4a39      	ldr	r2, [pc, #228]	; (80026d0 <xTaskResumeAll+0x1c8>)
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f2:	4938      	ldr	r1, [pc, #224]	; (80026d4 <xTaskResumeAll+0x1cc>)
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3304      	adds	r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	3204      	adds	r2, #4
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	1d1a      	adds	r2, r3, #4
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <xTaskResumeAll+0x1cc>)
 8002632:	441a      	add	r2, r3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	4925      	ldr	r1, [pc, #148]	; (80026d4 <xTaskResumeAll+0x1cc>)
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1c59      	adds	r1, r3, #1
 800264c:	4821      	ldr	r0, [pc, #132]	; (80026d4 <xTaskResumeAll+0x1cc>)
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4403      	add	r3, r0
 8002658:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <xTaskResumeAll+0x1d0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	429a      	cmp	r2, r3
 8002666:	d302      	bcc.n	800266e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <xTaskResumeAll+0x1d4>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <xTaskResumeAll+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f47f af70 	bne.w	8002558 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800267e:	f000 fa11 	bl	8002aa4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <xTaskResumeAll+0x1d8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d010      	beq.n	80026b0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800268e:	f000 f829 	bl	80026e4 <xTaskIncrementTick>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <xTaskResumeAll+0x1d4>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f1      	bne.n	800268e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <xTaskResumeAll+0x1d8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <xTaskResumeAll+0x1d4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026b4:	f000 fb70 	bl	8002d98 <vPortExitCritical>

    return xAlreadyYielded;
 80026b8:	697b      	ldr	r3, [r7, #20]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000198 	.word	0x20000198
 80026c8:	20000170 	.word	0x20000170
 80026cc:	20000130 	.word	0x20000130
 80026d0:	20000178 	.word	0x20000178
 80026d4:	2000009c 	.word	0x2000009c
 80026d8:	20000098 	.word	0x20000098
 80026dc:	20000184 	.word	0x20000184
 80026e0:	20000180 	.word	0x20000180

080026e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ee:	4b6e      	ldr	r3, [pc, #440]	; (80028a8 <xTaskIncrementTick+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 80cd 	bne.w	8002892 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026f8:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <xTaskIncrementTick+0x1c8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002700:	4a6a      	ldr	r2, [pc, #424]	; (80028ac <xTaskIncrementTick+0x1c8>)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d120      	bne.n	800274e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <xTaskIncrementTick+0x1cc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <xTaskIncrementTick+0x48>
        __asm volatile
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	607b      	str	r3, [r7, #4]
    }
 8002728:	bf00      	nop
 800272a:	e7fe      	b.n	800272a <xTaskIncrementTick+0x46>
 800272c:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <xTaskIncrementTick+0x1cc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	4b60      	ldr	r3, [pc, #384]	; (80028b4 <xTaskIncrementTick+0x1d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5e      	ldr	r2, [pc, #376]	; (80028b0 <xTaskIncrementTick+0x1cc>)
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4a5e      	ldr	r2, [pc, #376]	; (80028b4 <xTaskIncrementTick+0x1d0>)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <xTaskIncrementTick+0x1d4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a5c      	ldr	r2, [pc, #368]	; (80028b8 <xTaskIncrementTick+0x1d4>)
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	f000 f9ab 	bl	8002aa4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <xTaskIncrementTick+0x1d8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6a3a      	ldr	r2, [r7, #32]
 8002754:	429a      	cmp	r2, r3
 8002756:	f0c0 80a1 	bcc.w	800289c <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800275a:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <xTaskIncrementTick+0x1cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002764:	4b55      	ldr	r3, [pc, #340]	; (80028bc <xTaskIncrementTick+0x1d8>)
 8002766:	f04f 32ff 	mov.w	r2, #4294967295
 800276a:	601a      	str	r2, [r3, #0]
                    break;
 800276c:	e096      	b.n	800289c <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <xTaskIncrementTick+0x1cc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800277e:	6a3a      	ldr	r2, [r7, #32]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	429a      	cmp	r2, r3
 8002784:	d203      	bcs.n	800278e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002786:	4a4d      	ldr	r2, [pc, #308]	; (80028bc <xTaskIncrementTick+0x1d8>)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800278c:	e086      	b.n	800289c <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	68d2      	ldr	r2, [r2, #12]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	3304      	adds	r3, #4
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d103      	bne.n	80027bc <xTaskIncrementTick+0xd8>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1e5a      	subs	r2, r3, #1
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01e      	beq.n	8002812 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	6a12      	ldr	r2, [r2, #32]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	69d2      	ldr	r2, [r2, #28]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	3318      	adds	r3, #24
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d103      	bne.n	8002802 <xTaskIncrementTick+0x11e>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	2201      	movs	r2, #1
 8002818:	409a      	lsls	r2, r3
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <xTaskIncrementTick+0x1dc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <xTaskIncrementTick+0x1dc>)
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	4926      	ldr	r1, [pc, #152]	; (80028c4 <xTaskIncrementTick+0x1e0>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3304      	adds	r3, #4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	3204      	adds	r2, #4
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	1d1a      	adds	r2, r3, #4
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <xTaskIncrementTick+0x1e0>)
 8002868:	441a      	add	r2, r3
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	615a      	str	r2, [r3, #20]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002872:	4914      	ldr	r1, [pc, #80]	; (80028c4 <xTaskIncrementTick+0x1e0>)
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c59      	adds	r1, r3, #1
 8002882:	4810      	ldr	r0, [pc, #64]	; (80028c4 <xTaskIncrementTick+0x1e0>)
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002890:	e763      	b.n	800275a <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <xTaskIncrementTick+0x1e4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <xTaskIncrementTick+0x1e4>)
 800289a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000198 	.word	0x20000198
 80028ac:	20000174 	.word	0x20000174
 80028b0:	20000128 	.word	0x20000128
 80028b4:	2000012c 	.word	0x2000012c
 80028b8:	20000188 	.word	0x20000188
 80028bc:	20000190 	.word	0x20000190
 80028c0:	20000178 	.word	0x20000178
 80028c4:	2000009c 	.word	0x2000009c
 80028c8:	20000180 	.word	0x20000180

080028cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <vTaskSwitchContext+0xa4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <vTaskSwitchContext+0xa8>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80028e0:	e03f      	b.n	8002962 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <vTaskSwitchContext+0xa8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <vTaskSwitchContext+0xac>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	f1c3 031f 	rsb	r3, r3, #31
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	491f      	ldr	r1, [pc, #124]	; (800297c <vTaskSwitchContext+0xb0>)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	607b      	str	r3, [r7, #4]
    }
 8002924:	bf00      	nop
 8002926:	e7fe      	b.n	8002926 <vTaskSwitchContext+0x5a>
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <vTaskSwitchContext+0xb0>)
 8002934:	4413      	add	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	3308      	adds	r3, #8
 800294a:	429a      	cmp	r2, r3
 800294c:	d104      	bne.n	8002958 <vTaskSwitchContext+0x8c>
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <vTaskSwitchContext+0xb4>)
 8002960:	6013      	str	r3, [r2, #0]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000198 	.word	0x20000198
 8002974:	20000184 	.word	0x20000184
 8002978:	20000178 	.word	0x20000178
 800297c:	2000009c 	.word	0x2000009c
 8002980:	20000098 	.word	0x20000098

08002984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800298c:	f000 f84c 	bl	8002a28 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <prvIdleTask+0x20>)
 8002992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029a0:	e7f4      	b.n	800298c <prvIdleTask+0x8>
 80029a2:	bf00      	nop
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	e00c      	b.n	80029ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <prvInitialiseTaskLists+0x60>)
 80029c0:	4413      	add	r3, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb92 	bl	80020ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d9ef      	bls.n	80029b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <prvInitialiseTaskLists+0x64>)
 80029d6:	f7ff fb89 	bl	80020ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <prvInitialiseTaskLists+0x68>)
 80029dc:	f7ff fb86 	bl	80020ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <prvInitialiseTaskLists+0x6c>)
 80029e2:	f7ff fb83 	bl	80020ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80029e6:	480c      	ldr	r0, [pc, #48]	; (8002a18 <prvInitialiseTaskLists+0x70>)
 80029e8:	f7ff fb80 	bl	80020ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80029ec:	480b      	ldr	r0, [pc, #44]	; (8002a1c <prvInitialiseTaskLists+0x74>)
 80029ee:	f7ff fb7d 	bl	80020ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <prvInitialiseTaskLists+0x78>)
 80029f4:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <prvInitialiseTaskLists+0x64>)
 80029f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <prvInitialiseTaskLists+0x7c>)
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <prvInitialiseTaskLists+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000009c 	.word	0x2000009c
 8002a0c:	20000100 	.word	0x20000100
 8002a10:	20000114 	.word	0x20000114
 8002a14:	20000130 	.word	0x20000130
 8002a18:	20000144 	.word	0x20000144
 8002a1c:	2000015c 	.word	0x2000015c
 8002a20:	20000128 	.word	0x20000128
 8002a24:	2000012c 	.word	0x2000012c

08002a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a2e:	e019      	b.n	8002a64 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002a30:	f000 f982 	bl	8002d38 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a34:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <prvCheckTasksWaitingTermination+0x50>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fb80 	bl	8002146 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <prvCheckTasksWaitingTermination+0x54>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <prvCheckTasksWaitingTermination+0x54>)
 8002a4e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <prvCheckTasksWaitingTermination+0x58>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <prvCheckTasksWaitingTermination+0x58>)
 8002a58:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002a5a:	f000 f99d 	bl	8002d98 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f810 	bl	8002a84 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <prvCheckTasksWaitingTermination+0x58>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e1      	bne.n	8002a30 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000144 	.word	0x20000144
 8002a7c:	20000170 	.word	0x20000170
 8002a80:	20000158 	.word	0x20000158

08002a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 faed 	bl	8003070 <vPortFree>
            vPortFree( pxTCB );
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 faea 	bl	8003070 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <prvResetNextTaskUnblockTime+0x30>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <prvResetNextTaskUnblockTime+0x34>)
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002aba:	e005      	b.n	8002ac8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <prvResetNextTaskUnblockTime+0x30>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <prvResetNextTaskUnblockTime+0x34>)
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000128 	.word	0x20000128
 8002ad8:	20000190 	.word	0x20000190

08002adc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b04      	subs	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002af4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3b04      	subs	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <pxPortInitialiseStack+0x64>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3b14      	subs	r3, #20
 8002b16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3b04      	subs	r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f06f 0202 	mvn.w	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b20      	subs	r3, #32
 8002b30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	08002b45 	.word	0x08002b45

08002b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <prvTaskExitError+0x54>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d00a      	beq.n	8002b6e <prvTaskExitError+0x2a>
        __asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	60fb      	str	r3, [r7, #12]
    }
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <prvTaskExitError+0x28>
        __asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	60bb      	str	r3, [r7, #8]
    }
 8002b80:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002b82:	bf00      	nop
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0fc      	beq.n	8002b84 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	20000010 	.word	0x20000010
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <pxCurrentTCBConst2>)
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	6808      	ldr	r0, [r1, #0]
 8002ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002baa:	f380 8809 	msr	PSP, r0
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f380 8811 	msr	BASEPRI, r0
 8002bba:	4770      	bx	lr
 8002bbc:	f3af 8000 	nop.w

08002bc0 <pxCurrentTCBConst2>:
 8002bc0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002bc8:	4808      	ldr	r0, [pc, #32]	; (8002bec <prvPortStartFirstTask+0x24>)
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	6800      	ldr	r0, [r0, #0]
 8002bce:	f380 8808 	msr	MSP, r0
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f380 8814 	msr	CONTROL, r0
 8002bda:	b662      	cpsie	i
 8002bdc:	b661      	cpsie	f
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	df00      	svc	0
 8002be8:	bf00      	nop
 8002bea:	0000      	.short	0x0000
 8002bec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop

08002bf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bfa:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <xPortStartScheduler+0x120>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <xPortStartScheduler+0x124>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10a      	bne.n	8002c1a <xPortStartScheduler+0x26>
        __asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	613b      	str	r3, [r7, #16]
    }
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c1a:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <xPortStartScheduler+0x120>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a3f      	ldr	r2, [pc, #252]	; (8002d1c <xPortStartScheduler+0x128>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d10a      	bne.n	8002c3a <xPortStartScheduler+0x46>
        __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	60fb      	str	r3, [r7, #12]
    }
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <xPortStartScheduler+0x12c>)
 8002c3c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <xPortStartScheduler+0x130>)
 8002c60:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <xPortStartScheduler+0x134>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c68:	e009      	b.n	8002c7e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <xPortStartScheduler+0x134>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <xPortStartScheduler+0x134>)
 8002c72:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d0ef      	beq.n	8002c6a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <xPortStartScheduler+0x134>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d00a      	beq.n	8002cac <xPortStartScheduler+0xb8>
        __asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	60bb      	str	r3, [r7, #8]
    }
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <xPortStartScheduler+0x134>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <xPortStartScheduler+0x134>)
 8002cb4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <xPortStartScheduler+0x134>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <xPortStartScheduler+0x134>)
 8002cc0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <xPortStartScheduler+0x138>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <xPortStartScheduler+0x138>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <xPortStartScheduler+0x138>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <xPortStartScheduler+0x138>)
 8002cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ce0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ce2:	f000 f8db 	bl	8002e9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <xPortStartScheduler+0x13c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002cec:	f000 f8fa 	bl	8002ee4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <xPortStartScheduler+0x140>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <xPortStartScheduler+0x140>)
 8002cf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002cfc:	f7ff ff64 	bl	8002bc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d00:	f7ff fde4 	bl	80028cc <vTaskSwitchContext>
    prvTaskExitError();
 8002d04:	f7ff ff1e 	bl	8002b44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	e000ed00 	.word	0xe000ed00
 8002d18:	410fc271 	.word	0x410fc271
 8002d1c:	410fc270 	.word	0x410fc270
 8002d20:	e000e400 	.word	0xe000e400
 8002d24:	2000019c 	.word	0x2000019c
 8002d28:	200001a0 	.word	0x200001a0
 8002d2c:	e000ed20 	.word	0xe000ed20
 8002d30:	20000010 	.word	0x20000010
 8002d34:	e000ef34 	.word	0xe000ef34

08002d38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	607b      	str	r3, [r7, #4]
    }
 8002d50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <vPortEnterCritical+0x58>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <vPortEnterCritical+0x58>)
 8002d5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <vPortEnterCritical+0x58>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d10f      	bne.n	8002d84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <vPortEnterCritical+0x5c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	603b      	str	r3, [r7, #0]
    }
 8002d80:	bf00      	nop
 8002d82:	e7fe      	b.n	8002d82 <vPortEnterCritical+0x4a>
    }
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	20000010 	.word	0x20000010
 8002d94:	e000ed04 	.word	0xe000ed04

08002d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <vPortExitCritical+0x50>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <vPortExitCritical+0x24>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	607b      	str	r3, [r7, #4]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <vPortExitCritical+0x50>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <vPortExitCritical+0x50>)
 8002dc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <vPortExitCritical+0x50>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <vPortExitCritical+0x42>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002dd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000010 	.word	0x20000010
 8002dec:	00000000 	.word	0x00000000

08002df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002df0:	f3ef 8009 	mrs	r0, PSP
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <pxCurrentTCBConst>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f01e 0f10 	tst.w	lr, #16
 8002e00:	bf08      	it	eq
 8002e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0a:	6010      	str	r0, [r2, #0]
 8002e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e14:	f380 8811 	msr	BASEPRI, r0
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f7ff fd54 	bl	80028cc <vTaskSwitchContext>
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f380 8811 	msr	BASEPRI, r0
 8002e2c:	bc09      	pop	{r0, r3}
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	6808      	ldr	r0, [r1, #0]
 8002e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e36:	f01e 0f10 	tst.w	lr, #16
 8002e3a:	bf08      	it	eq
 8002e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e40:	f380 8809 	msr	PSP, r0
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	f3af 8000 	nop.w

08002e50 <pxCurrentTCBConst>:
 8002e50:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop

08002e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	607b      	str	r3, [r7, #4]
    }
 8002e70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e72:	f7ff fc37 	bl	80026e4 <xTaskIncrementTick>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <SysTick_Handler+0x40>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	2300      	movs	r3, #0
 8002e86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f383 8811 	msr	BASEPRI, r3
    }
 8002e8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <vPortSetupTimerInterrupt+0x34>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <vPortSetupTimerInterrupt+0x38>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <vPortSetupTimerInterrupt+0x3c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <vPortSetupTimerInterrupt+0x40>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	099b      	lsrs	r3, r3, #6
 8002eb8:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <vPortSetupTimerInterrupt+0x44>)
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <vPortSetupTimerInterrupt+0x34>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	601a      	str	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e010 	.word	0xe000e010
 8002ed4:	e000e018 	.word	0xe000e018
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	10624dd3 	.word	0x10624dd3
 8002ee0:	e000e014 	.word	0xe000e014

08002ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ef4 <vPortEnableVFP+0x10>
 8002ee8:	6801      	ldr	r1, [r0, #0]
 8002eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002eee:	6001      	str	r1, [r0, #0]
 8002ef0:	4770      	bx	lr
 8002ef2:	0000      	.short	0x0000
 8002ef4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop

08002efc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002f08:	f7ff faf0 	bl	80024ec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <pvPortMalloc+0x160>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f14:	f000 f908 	bl	8003128 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002f1e:	2208      	movs	r2, #8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	3308      	adds	r3, #8
 8002f2a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d804      	bhi.n	8002f40 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	e001      	b.n	8002f44 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	db70      	blt.n	800302c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d06d      	beq.n	800302c <pvPortMalloc+0x130>
 8002f50:	4b43      	ldr	r3, [pc, #268]	; (8003060 <pvPortMalloc+0x164>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d868      	bhi.n	800302c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f5a:	4b42      	ldr	r3, [pc, #264]	; (8003064 <pvPortMalloc+0x168>)
 8002f5c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <pvPortMalloc+0x168>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f64:	e004      	b.n	8002f70 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d903      	bls.n	8002f82 <pvPortMalloc+0x86>
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f1      	bne.n	8002f66 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <pvPortMalloc+0x160>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d04f      	beq.n	800302c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	4413      	add	r3, r2
 8002f94:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d91f      	bls.n	8002fee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <pvPortMalloc+0xda>
        __asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	613b      	str	r3, [r7, #16]
    }
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1ad2      	subs	r2, r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fe8:	6978      	ldr	r0, [r7, #20]
 8002fea:	f000 f8f9 	bl	80031e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <pvPortMalloc+0x164>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <pvPortMalloc+0x164>)
 8002ffa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <pvPortMalloc+0x164>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <pvPortMalloc+0x16c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d203      	bcs.n	8003010 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <pvPortMalloc+0x164>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a16      	ldr	r2, [pc, #88]	; (8003068 <pvPortMalloc+0x16c>)
 800300e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <pvPortMalloc+0x170>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a10      	ldr	r2, [pc, #64]	; (800306c <pvPortMalloc+0x170>)
 800302a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800302c:	f7ff fa6c 	bl	8002508 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <pvPortMalloc+0x154>
        __asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	60fb      	str	r3, [r7, #12]
    }
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <pvPortMalloc+0x152>
    return pvReturn;
 8003050:	69fb      	ldr	r3, [r7, #28]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200169ac 	.word	0x200169ac
 8003060:	200169b0 	.word	0x200169b0
 8003064:	200169a4 	.word	0x200169a4
 8003068:	200169b4 	.word	0x200169b4
 800306c:	200169b8 	.word	0x200169b8

08003070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d049      	beq.n	8003116 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003082:	2308      	movs	r3, #8
 8003084:	425b      	negs	r3, r3
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <vPortFree+0x3e>
        __asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	60fb      	str	r3, [r7, #12]
    }
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <vPortFree+0x5c>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	60bb      	str	r3, [r7, #8]
    }
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0fdb      	lsrs	r3, r3, #31
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d118      	bne.n	8003116 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80030f0:	f7ff f9fc 	bl	80024ec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <vPortFree+0xb0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <vPortFree+0xb0>)
 8003100:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003102:	6938      	ldr	r0, [r7, #16]
 8003104:	f000 f86c 	bl	80031e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <vPortFree+0xb4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a05      	ldr	r2, [pc, #20]	; (8003124 <vPortFree+0xb4>)
 8003110:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003112:	f7ff f9f9 	bl	8002508 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200169b0 	.word	0x200169b0
 8003124:	200169bc 	.word	0x200169bc

08003128 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800312e:	f44f 33b4 	mov.w	r3, #92160	; 0x16800
 8003132:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <prvHeapInit+0xa4>)
 8003136:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3307      	adds	r3, #7
 8003146:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <prvHeapInit+0xa4>)
 8003158:	4413      	add	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <prvHeapInit+0xa8>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <prvHeapInit+0xa8>)
 8003168:	2200      	movs	r2, #0
 800316a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003174:	2208      	movs	r2, #8
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0307 	bic.w	r3, r3, #7
 8003182:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <prvHeapInit+0xac>)
 8003188:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <prvHeapInit+0xac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <prvHeapInit+0xac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <prvHeapInit+0xac>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <prvHeapInit+0xb0>)
 80031b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <prvHeapInit+0xb4>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	200001a4 	.word	0x200001a4
 80031d0:	200169a4 	.word	0x200169a4
 80031d4:	200169ac 	.word	0x200169ac
 80031d8:	200169b4 	.word	0x200169b4
 80031dc:	200169b0 	.word	0x200169b0

080031e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <prvInsertBlockIntoFreeList+0xac>)
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e002      	b.n	80031f4 <prvInsertBlockIntoFreeList+0x14>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d8f7      	bhi.n	80031ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4413      	add	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d108      	bne.n	8003222 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	441a      	add	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d118      	bne.n	8003268 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <prvInsertBlockIntoFreeList+0xb0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d00d      	beq.n	800325e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e008      	b.n	8003270 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <prvInsertBlockIntoFreeList+0xb0>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e003      	b.n	8003270 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d002      	beq.n	800327e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	200169a4 	.word	0x200169a4
 8003290:	200169ac 	.word	0x200169ac

08003294 <__errno>:
 8003294:	4b01      	ldr	r3, [pc, #4]	; (800329c <__errno+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000014 	.word	0x20000014

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d0d      	ldr	r5, [pc, #52]	; (80032d8 <__libc_init_array+0x38>)
 80032a4:	4c0d      	ldr	r4, [pc, #52]	; (80032dc <__libc_init_array+0x3c>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	2600      	movs	r6, #0
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	4d0b      	ldr	r5, [pc, #44]	; (80032e0 <__libc_init_array+0x40>)
 80032b2:	4c0c      	ldr	r4, [pc, #48]	; (80032e4 <__libc_init_array+0x44>)
 80032b4:	f000 fce6 	bl	8003c84 <_init>
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	2600      	movs	r6, #0
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003d50 	.word	0x08003d50
 80032dc:	08003d50 	.word	0x08003d50
 80032e0:	08003d50 	.word	0x08003d50
 80032e4:	08003d54 	.word	0x08003d54

080032e8 <memset>:
 80032e8:	4402      	add	r2, r0
 80032ea:	4603      	mov	r3, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d100      	bne.n	80032f2 <memset+0xa>
 80032f0:	4770      	bx	lr
 80032f2:	f803 1b01 	strb.w	r1, [r3], #1
 80032f6:	e7f9      	b.n	80032ec <memset+0x4>

080032f8 <_puts_r>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	460e      	mov	r6, r1
 80032fc:	4605      	mov	r5, r0
 80032fe:	b118      	cbz	r0, 8003308 <_puts_r+0x10>
 8003300:	6983      	ldr	r3, [r0, #24]
 8003302:	b90b      	cbnz	r3, 8003308 <_puts_r+0x10>
 8003304:	f000 fa48 	bl	8003798 <__sinit>
 8003308:	69ab      	ldr	r3, [r5, #24]
 800330a:	68ac      	ldr	r4, [r5, #8]
 800330c:	b913      	cbnz	r3, 8003314 <_puts_r+0x1c>
 800330e:	4628      	mov	r0, r5
 8003310:	f000 fa42 	bl	8003798 <__sinit>
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <_puts_r+0xd0>)
 8003316:	429c      	cmp	r4, r3
 8003318:	d120      	bne.n	800335c <_puts_r+0x64>
 800331a:	686c      	ldr	r4, [r5, #4]
 800331c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800331e:	07db      	lsls	r3, r3, #31
 8003320:	d405      	bmi.n	800332e <_puts_r+0x36>
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	0598      	lsls	r0, r3, #22
 8003326:	d402      	bmi.n	800332e <_puts_r+0x36>
 8003328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800332a:	f000 fad3 	bl	80038d4 <__retarget_lock_acquire_recursive>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	0719      	lsls	r1, r3, #28
 8003332:	d51d      	bpl.n	8003370 <_puts_r+0x78>
 8003334:	6923      	ldr	r3, [r4, #16]
 8003336:	b1db      	cbz	r3, 8003370 <_puts_r+0x78>
 8003338:	3e01      	subs	r6, #1
 800333a:	68a3      	ldr	r3, [r4, #8]
 800333c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003340:	3b01      	subs	r3, #1
 8003342:	60a3      	str	r3, [r4, #8]
 8003344:	bb39      	cbnz	r1, 8003396 <_puts_r+0x9e>
 8003346:	2b00      	cmp	r3, #0
 8003348:	da38      	bge.n	80033bc <_puts_r+0xc4>
 800334a:	4622      	mov	r2, r4
 800334c:	210a      	movs	r1, #10
 800334e:	4628      	mov	r0, r5
 8003350:	f000 f848 	bl	80033e4 <__swbuf_r>
 8003354:	3001      	adds	r0, #1
 8003356:	d011      	beq.n	800337c <_puts_r+0x84>
 8003358:	250a      	movs	r5, #10
 800335a:	e011      	b.n	8003380 <_puts_r+0x88>
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <_puts_r+0xd4>)
 800335e:	429c      	cmp	r4, r3
 8003360:	d101      	bne.n	8003366 <_puts_r+0x6e>
 8003362:	68ac      	ldr	r4, [r5, #8]
 8003364:	e7da      	b.n	800331c <_puts_r+0x24>
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <_puts_r+0xd8>)
 8003368:	429c      	cmp	r4, r3
 800336a:	bf08      	it	eq
 800336c:	68ec      	ldreq	r4, [r5, #12]
 800336e:	e7d5      	b.n	800331c <_puts_r+0x24>
 8003370:	4621      	mov	r1, r4
 8003372:	4628      	mov	r0, r5
 8003374:	f000 f888 	bl	8003488 <__swsetup_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	d0dd      	beq.n	8003338 <_puts_r+0x40>
 800337c:	f04f 35ff 	mov.w	r5, #4294967295
 8003380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003382:	07da      	lsls	r2, r3, #31
 8003384:	d405      	bmi.n	8003392 <_puts_r+0x9a>
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	059b      	lsls	r3, r3, #22
 800338a:	d402      	bmi.n	8003392 <_puts_r+0x9a>
 800338c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800338e:	f000 faa2 	bl	80038d6 <__retarget_lock_release_recursive>
 8003392:	4628      	mov	r0, r5
 8003394:	bd70      	pop	{r4, r5, r6, pc}
 8003396:	2b00      	cmp	r3, #0
 8003398:	da04      	bge.n	80033a4 <_puts_r+0xac>
 800339a:	69a2      	ldr	r2, [r4, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	dc06      	bgt.n	80033ae <_puts_r+0xb6>
 80033a0:	290a      	cmp	r1, #10
 80033a2:	d004      	beq.n	80033ae <_puts_r+0xb6>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	6022      	str	r2, [r4, #0]
 80033aa:	7019      	strb	r1, [r3, #0]
 80033ac:	e7c5      	b.n	800333a <_puts_r+0x42>
 80033ae:	4622      	mov	r2, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 f817 	bl	80033e4 <__swbuf_r>
 80033b6:	3001      	adds	r0, #1
 80033b8:	d1bf      	bne.n	800333a <_puts_r+0x42>
 80033ba:	e7df      	b.n	800337c <_puts_r+0x84>
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	250a      	movs	r5, #10
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	6022      	str	r2, [r4, #0]
 80033c4:	701d      	strb	r5, [r3, #0]
 80033c6:	e7db      	b.n	8003380 <_puts_r+0x88>
 80033c8:	08003d08 	.word	0x08003d08
 80033cc:	08003d28 	.word	0x08003d28
 80033d0:	08003ce8 	.word	0x08003ce8

080033d4 <puts>:
 80033d4:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <puts+0xc>)
 80033d6:	4601      	mov	r1, r0
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	f7ff bf8d 	b.w	80032f8 <_puts_r>
 80033de:	bf00      	nop
 80033e0:	20000014 	.word	0x20000014

080033e4 <__swbuf_r>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	460e      	mov	r6, r1
 80033e8:	4614      	mov	r4, r2
 80033ea:	4605      	mov	r5, r0
 80033ec:	b118      	cbz	r0, 80033f6 <__swbuf_r+0x12>
 80033ee:	6983      	ldr	r3, [r0, #24]
 80033f0:	b90b      	cbnz	r3, 80033f6 <__swbuf_r+0x12>
 80033f2:	f000 f9d1 	bl	8003798 <__sinit>
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <__swbuf_r+0x98>)
 80033f8:	429c      	cmp	r4, r3
 80033fa:	d12b      	bne.n	8003454 <__swbuf_r+0x70>
 80033fc:	686c      	ldr	r4, [r5, #4]
 80033fe:	69a3      	ldr	r3, [r4, #24]
 8003400:	60a3      	str	r3, [r4, #8]
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	071a      	lsls	r2, r3, #28
 8003406:	d52f      	bpl.n	8003468 <__swbuf_r+0x84>
 8003408:	6923      	ldr	r3, [r4, #16]
 800340a:	b36b      	cbz	r3, 8003468 <__swbuf_r+0x84>
 800340c:	6923      	ldr	r3, [r4, #16]
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	1ac0      	subs	r0, r0, r3
 8003412:	6963      	ldr	r3, [r4, #20]
 8003414:	b2f6      	uxtb	r6, r6
 8003416:	4283      	cmp	r3, r0
 8003418:	4637      	mov	r7, r6
 800341a:	dc04      	bgt.n	8003426 <__swbuf_r+0x42>
 800341c:	4621      	mov	r1, r4
 800341e:	4628      	mov	r0, r5
 8003420:	f000 f926 	bl	8003670 <_fflush_r>
 8003424:	bb30      	cbnz	r0, 8003474 <__swbuf_r+0x90>
 8003426:	68a3      	ldr	r3, [r4, #8]
 8003428:	3b01      	subs	r3, #1
 800342a:	60a3      	str	r3, [r4, #8]
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	6022      	str	r2, [r4, #0]
 8003432:	701e      	strb	r6, [r3, #0]
 8003434:	6963      	ldr	r3, [r4, #20]
 8003436:	3001      	adds	r0, #1
 8003438:	4283      	cmp	r3, r0
 800343a:	d004      	beq.n	8003446 <__swbuf_r+0x62>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	07db      	lsls	r3, r3, #31
 8003440:	d506      	bpl.n	8003450 <__swbuf_r+0x6c>
 8003442:	2e0a      	cmp	r6, #10
 8003444:	d104      	bne.n	8003450 <__swbuf_r+0x6c>
 8003446:	4621      	mov	r1, r4
 8003448:	4628      	mov	r0, r5
 800344a:	f000 f911 	bl	8003670 <_fflush_r>
 800344e:	b988      	cbnz	r0, 8003474 <__swbuf_r+0x90>
 8003450:	4638      	mov	r0, r7
 8003452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <__swbuf_r+0x9c>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d101      	bne.n	800345e <__swbuf_r+0x7a>
 800345a:	68ac      	ldr	r4, [r5, #8]
 800345c:	e7cf      	b.n	80033fe <__swbuf_r+0x1a>
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <__swbuf_r+0xa0>)
 8003460:	429c      	cmp	r4, r3
 8003462:	bf08      	it	eq
 8003464:	68ec      	ldreq	r4, [r5, #12]
 8003466:	e7ca      	b.n	80033fe <__swbuf_r+0x1a>
 8003468:	4621      	mov	r1, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 f80c 	bl	8003488 <__swsetup_r>
 8003470:	2800      	cmp	r0, #0
 8003472:	d0cb      	beq.n	800340c <__swbuf_r+0x28>
 8003474:	f04f 37ff 	mov.w	r7, #4294967295
 8003478:	e7ea      	b.n	8003450 <__swbuf_r+0x6c>
 800347a:	bf00      	nop
 800347c:	08003d08 	.word	0x08003d08
 8003480:	08003d28 	.word	0x08003d28
 8003484:	08003ce8 	.word	0x08003ce8

08003488 <__swsetup_r>:
 8003488:	4b32      	ldr	r3, [pc, #200]	; (8003554 <__swsetup_r+0xcc>)
 800348a:	b570      	push	{r4, r5, r6, lr}
 800348c:	681d      	ldr	r5, [r3, #0]
 800348e:	4606      	mov	r6, r0
 8003490:	460c      	mov	r4, r1
 8003492:	b125      	cbz	r5, 800349e <__swsetup_r+0x16>
 8003494:	69ab      	ldr	r3, [r5, #24]
 8003496:	b913      	cbnz	r3, 800349e <__swsetup_r+0x16>
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f97d 	bl	8003798 <__sinit>
 800349e:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <__swsetup_r+0xd0>)
 80034a0:	429c      	cmp	r4, r3
 80034a2:	d10f      	bne.n	80034c4 <__swsetup_r+0x3c>
 80034a4:	686c      	ldr	r4, [r5, #4]
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034ac:	0719      	lsls	r1, r3, #28
 80034ae:	d42c      	bmi.n	800350a <__swsetup_r+0x82>
 80034b0:	06dd      	lsls	r5, r3, #27
 80034b2:	d411      	bmi.n	80034d8 <__swsetup_r+0x50>
 80034b4:	2309      	movs	r3, #9
 80034b6:	6033      	str	r3, [r6, #0]
 80034b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034bc:	81a3      	strh	r3, [r4, #12]
 80034be:	f04f 30ff 	mov.w	r0, #4294967295
 80034c2:	e03e      	b.n	8003542 <__swsetup_r+0xba>
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <__swsetup_r+0xd4>)
 80034c6:	429c      	cmp	r4, r3
 80034c8:	d101      	bne.n	80034ce <__swsetup_r+0x46>
 80034ca:	68ac      	ldr	r4, [r5, #8]
 80034cc:	e7eb      	b.n	80034a6 <__swsetup_r+0x1e>
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <__swsetup_r+0xd8>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	bf08      	it	eq
 80034d4:	68ec      	ldreq	r4, [r5, #12]
 80034d6:	e7e6      	b.n	80034a6 <__swsetup_r+0x1e>
 80034d8:	0758      	lsls	r0, r3, #29
 80034da:	d512      	bpl.n	8003502 <__swsetup_r+0x7a>
 80034dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034de:	b141      	cbz	r1, 80034f2 <__swsetup_r+0x6a>
 80034e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034e4:	4299      	cmp	r1, r3
 80034e6:	d002      	beq.n	80034ee <__swsetup_r+0x66>
 80034e8:	4630      	mov	r0, r6
 80034ea:	f000 fa59 	bl	80039a0 <_free_r>
 80034ee:	2300      	movs	r3, #0
 80034f0:	6363      	str	r3, [r4, #52]	; 0x34
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	2300      	movs	r3, #0
 80034fc:	6063      	str	r3, [r4, #4]
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	f043 0308 	orr.w	r3, r3, #8
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	6923      	ldr	r3, [r4, #16]
 800350c:	b94b      	cbnz	r3, 8003522 <__swsetup_r+0x9a>
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003518:	d003      	beq.n	8003522 <__swsetup_r+0x9a>
 800351a:	4621      	mov	r1, r4
 800351c:	4630      	mov	r0, r6
 800351e:	f000 f9ff 	bl	8003920 <__smakebuf_r>
 8003522:	89a0      	ldrh	r0, [r4, #12]
 8003524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003528:	f010 0301 	ands.w	r3, r0, #1
 800352c:	d00a      	beq.n	8003544 <__swsetup_r+0xbc>
 800352e:	2300      	movs	r3, #0
 8003530:	60a3      	str	r3, [r4, #8]
 8003532:	6963      	ldr	r3, [r4, #20]
 8003534:	425b      	negs	r3, r3
 8003536:	61a3      	str	r3, [r4, #24]
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	b943      	cbnz	r3, 800354e <__swsetup_r+0xc6>
 800353c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003540:	d1ba      	bne.n	80034b8 <__swsetup_r+0x30>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	0781      	lsls	r1, r0, #30
 8003546:	bf58      	it	pl
 8003548:	6963      	ldrpl	r3, [r4, #20]
 800354a:	60a3      	str	r3, [r4, #8]
 800354c:	e7f4      	b.n	8003538 <__swsetup_r+0xb0>
 800354e:	2000      	movs	r0, #0
 8003550:	e7f7      	b.n	8003542 <__swsetup_r+0xba>
 8003552:	bf00      	nop
 8003554:	20000014 	.word	0x20000014
 8003558:	08003d08 	.word	0x08003d08
 800355c:	08003d28 	.word	0x08003d28
 8003560:	08003ce8 	.word	0x08003ce8

08003564 <__sflush_r>:
 8003564:	898a      	ldrh	r2, [r1, #12]
 8003566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800356a:	4605      	mov	r5, r0
 800356c:	0710      	lsls	r0, r2, #28
 800356e:	460c      	mov	r4, r1
 8003570:	d458      	bmi.n	8003624 <__sflush_r+0xc0>
 8003572:	684b      	ldr	r3, [r1, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	dc05      	bgt.n	8003584 <__sflush_r+0x20>
 8003578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	dc02      	bgt.n	8003584 <__sflush_r+0x20>
 800357e:	2000      	movs	r0, #0
 8003580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003586:	2e00      	cmp	r6, #0
 8003588:	d0f9      	beq.n	800357e <__sflush_r+0x1a>
 800358a:	2300      	movs	r3, #0
 800358c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003590:	682f      	ldr	r7, [r5, #0]
 8003592:	602b      	str	r3, [r5, #0]
 8003594:	d032      	beq.n	80035fc <__sflush_r+0x98>
 8003596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	075a      	lsls	r2, r3, #29
 800359c:	d505      	bpl.n	80035aa <__sflush_r+0x46>
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	1ac0      	subs	r0, r0, r3
 80035a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035a4:	b10b      	cbz	r3, 80035aa <__sflush_r+0x46>
 80035a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a8:	1ac0      	subs	r0, r0, r3
 80035aa:	2300      	movs	r3, #0
 80035ac:	4602      	mov	r2, r0
 80035ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035b0:	6a21      	ldr	r1, [r4, #32]
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b0      	blx	r6
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	d106      	bne.n	80035ca <__sflush_r+0x66>
 80035bc:	6829      	ldr	r1, [r5, #0]
 80035be:	291d      	cmp	r1, #29
 80035c0:	d82c      	bhi.n	800361c <__sflush_r+0xb8>
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <__sflush_r+0x108>)
 80035c4:	40ca      	lsrs	r2, r1
 80035c6:	07d6      	lsls	r6, r2, #31
 80035c8:	d528      	bpl.n	800361c <__sflush_r+0xb8>
 80035ca:	2200      	movs	r2, #0
 80035cc:	6062      	str	r2, [r4, #4]
 80035ce:	04d9      	lsls	r1, r3, #19
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	6022      	str	r2, [r4, #0]
 80035d4:	d504      	bpl.n	80035e0 <__sflush_r+0x7c>
 80035d6:	1c42      	adds	r2, r0, #1
 80035d8:	d101      	bne.n	80035de <__sflush_r+0x7a>
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	b903      	cbnz	r3, 80035e0 <__sflush_r+0x7c>
 80035de:	6560      	str	r0, [r4, #84]	; 0x54
 80035e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e2:	602f      	str	r7, [r5, #0]
 80035e4:	2900      	cmp	r1, #0
 80035e6:	d0ca      	beq.n	800357e <__sflush_r+0x1a>
 80035e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ec:	4299      	cmp	r1, r3
 80035ee:	d002      	beq.n	80035f6 <__sflush_r+0x92>
 80035f0:	4628      	mov	r0, r5
 80035f2:	f000 f9d5 	bl	80039a0 <_free_r>
 80035f6:	2000      	movs	r0, #0
 80035f8:	6360      	str	r0, [r4, #52]	; 0x34
 80035fa:	e7c1      	b.n	8003580 <__sflush_r+0x1c>
 80035fc:	6a21      	ldr	r1, [r4, #32]
 80035fe:	2301      	movs	r3, #1
 8003600:	4628      	mov	r0, r5
 8003602:	47b0      	blx	r6
 8003604:	1c41      	adds	r1, r0, #1
 8003606:	d1c7      	bne.n	8003598 <__sflush_r+0x34>
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0c4      	beq.n	8003598 <__sflush_r+0x34>
 800360e:	2b1d      	cmp	r3, #29
 8003610:	d001      	beq.n	8003616 <__sflush_r+0xb2>
 8003612:	2b16      	cmp	r3, #22
 8003614:	d101      	bne.n	800361a <__sflush_r+0xb6>
 8003616:	602f      	str	r7, [r5, #0]
 8003618:	e7b1      	b.n	800357e <__sflush_r+0x1a>
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003620:	81a3      	strh	r3, [r4, #12]
 8003622:	e7ad      	b.n	8003580 <__sflush_r+0x1c>
 8003624:	690f      	ldr	r7, [r1, #16]
 8003626:	2f00      	cmp	r7, #0
 8003628:	d0a9      	beq.n	800357e <__sflush_r+0x1a>
 800362a:	0793      	lsls	r3, r2, #30
 800362c:	680e      	ldr	r6, [r1, #0]
 800362e:	bf08      	it	eq
 8003630:	694b      	ldreq	r3, [r1, #20]
 8003632:	600f      	str	r7, [r1, #0]
 8003634:	bf18      	it	ne
 8003636:	2300      	movne	r3, #0
 8003638:	eba6 0807 	sub.w	r8, r6, r7
 800363c:	608b      	str	r3, [r1, #8]
 800363e:	f1b8 0f00 	cmp.w	r8, #0
 8003642:	dd9c      	ble.n	800357e <__sflush_r+0x1a>
 8003644:	6a21      	ldr	r1, [r4, #32]
 8003646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003648:	4643      	mov	r3, r8
 800364a:	463a      	mov	r2, r7
 800364c:	4628      	mov	r0, r5
 800364e:	47b0      	blx	r6
 8003650:	2800      	cmp	r0, #0
 8003652:	dc06      	bgt.n	8003662 <__sflush_r+0xfe>
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800365a:	81a3      	strh	r3, [r4, #12]
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	e78e      	b.n	8003580 <__sflush_r+0x1c>
 8003662:	4407      	add	r7, r0
 8003664:	eba8 0800 	sub.w	r8, r8, r0
 8003668:	e7e9      	b.n	800363e <__sflush_r+0xda>
 800366a:	bf00      	nop
 800366c:	20400001 	.word	0x20400001

08003670 <_fflush_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	4605      	mov	r5, r0
 8003676:	460c      	mov	r4, r1
 8003678:	b913      	cbnz	r3, 8003680 <_fflush_r+0x10>
 800367a:	2500      	movs	r5, #0
 800367c:	4628      	mov	r0, r5
 800367e:	bd38      	pop	{r3, r4, r5, pc}
 8003680:	b118      	cbz	r0, 800368a <_fflush_r+0x1a>
 8003682:	6983      	ldr	r3, [r0, #24]
 8003684:	b90b      	cbnz	r3, 800368a <_fflush_r+0x1a>
 8003686:	f000 f887 	bl	8003798 <__sinit>
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <_fflush_r+0x6c>)
 800368c:	429c      	cmp	r4, r3
 800368e:	d11b      	bne.n	80036c8 <_fflush_r+0x58>
 8003690:	686c      	ldr	r4, [r5, #4]
 8003692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ef      	beq.n	800367a <_fflush_r+0xa>
 800369a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800369c:	07d0      	lsls	r0, r2, #31
 800369e:	d404      	bmi.n	80036aa <_fflush_r+0x3a>
 80036a0:	0599      	lsls	r1, r3, #22
 80036a2:	d402      	bmi.n	80036aa <_fflush_r+0x3a>
 80036a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a6:	f000 f915 	bl	80038d4 <__retarget_lock_acquire_recursive>
 80036aa:	4628      	mov	r0, r5
 80036ac:	4621      	mov	r1, r4
 80036ae:	f7ff ff59 	bl	8003564 <__sflush_r>
 80036b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036b4:	07da      	lsls	r2, r3, #31
 80036b6:	4605      	mov	r5, r0
 80036b8:	d4e0      	bmi.n	800367c <_fflush_r+0xc>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	059b      	lsls	r3, r3, #22
 80036be:	d4dd      	bmi.n	800367c <_fflush_r+0xc>
 80036c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036c2:	f000 f908 	bl	80038d6 <__retarget_lock_release_recursive>
 80036c6:	e7d9      	b.n	800367c <_fflush_r+0xc>
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <_fflush_r+0x70>)
 80036ca:	429c      	cmp	r4, r3
 80036cc:	d101      	bne.n	80036d2 <_fflush_r+0x62>
 80036ce:	68ac      	ldr	r4, [r5, #8]
 80036d0:	e7df      	b.n	8003692 <_fflush_r+0x22>
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <_fflush_r+0x74>)
 80036d4:	429c      	cmp	r4, r3
 80036d6:	bf08      	it	eq
 80036d8:	68ec      	ldreq	r4, [r5, #12]
 80036da:	e7da      	b.n	8003692 <_fflush_r+0x22>
 80036dc:	08003d08 	.word	0x08003d08
 80036e0:	08003d28 	.word	0x08003d28
 80036e4:	08003ce8 	.word	0x08003ce8

080036e8 <std>:
 80036e8:	2300      	movs	r3, #0
 80036ea:	b510      	push	{r4, lr}
 80036ec:	4604      	mov	r4, r0
 80036ee:	e9c0 3300 	strd	r3, r3, [r0]
 80036f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036f6:	6083      	str	r3, [r0, #8]
 80036f8:	8181      	strh	r1, [r0, #12]
 80036fa:	6643      	str	r3, [r0, #100]	; 0x64
 80036fc:	81c2      	strh	r2, [r0, #14]
 80036fe:	6183      	str	r3, [r0, #24]
 8003700:	4619      	mov	r1, r3
 8003702:	2208      	movs	r2, #8
 8003704:	305c      	adds	r0, #92	; 0x5c
 8003706:	f7ff fdef 	bl	80032e8 <memset>
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <std+0x38>)
 800370c:	6263      	str	r3, [r4, #36]	; 0x24
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <std+0x3c>)
 8003710:	62a3      	str	r3, [r4, #40]	; 0x28
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <std+0x40>)
 8003714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <std+0x44>)
 8003718:	6224      	str	r4, [r4, #32]
 800371a:	6323      	str	r3, [r4, #48]	; 0x30
 800371c:	bd10      	pop	{r4, pc}
 800371e:	bf00      	nop
 8003720:	08003b15 	.word	0x08003b15
 8003724:	08003b37 	.word	0x08003b37
 8003728:	08003b6f 	.word	0x08003b6f
 800372c:	08003b93 	.word	0x08003b93

08003730 <_cleanup_r>:
 8003730:	4901      	ldr	r1, [pc, #4]	; (8003738 <_cleanup_r+0x8>)
 8003732:	f000 b8af 	b.w	8003894 <_fwalk_reent>
 8003736:	bf00      	nop
 8003738:	08003671 	.word	0x08003671

0800373c <__sfmoreglue>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	1e4a      	subs	r2, r1, #1
 8003740:	2568      	movs	r5, #104	; 0x68
 8003742:	4355      	muls	r5, r2
 8003744:	460e      	mov	r6, r1
 8003746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800374a:	f000 f979 	bl	8003a40 <_malloc_r>
 800374e:	4604      	mov	r4, r0
 8003750:	b140      	cbz	r0, 8003764 <__sfmoreglue+0x28>
 8003752:	2100      	movs	r1, #0
 8003754:	e9c0 1600 	strd	r1, r6, [r0]
 8003758:	300c      	adds	r0, #12
 800375a:	60a0      	str	r0, [r4, #8]
 800375c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003760:	f7ff fdc2 	bl	80032e8 <memset>
 8003764:	4620      	mov	r0, r4
 8003766:	bd70      	pop	{r4, r5, r6, pc}

08003768 <__sfp_lock_acquire>:
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <__sfp_lock_acquire+0x8>)
 800376a:	f000 b8b3 	b.w	80038d4 <__retarget_lock_acquire_recursive>
 800376e:	bf00      	nop
 8003770:	20016a1c 	.word	0x20016a1c

08003774 <__sfp_lock_release>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__sfp_lock_release+0x8>)
 8003776:	f000 b8ae 	b.w	80038d6 <__retarget_lock_release_recursive>
 800377a:	bf00      	nop
 800377c:	20016a1c 	.word	0x20016a1c

08003780 <__sinit_lock_acquire>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__sinit_lock_acquire+0x8>)
 8003782:	f000 b8a7 	b.w	80038d4 <__retarget_lock_acquire_recursive>
 8003786:	bf00      	nop
 8003788:	20016a17 	.word	0x20016a17

0800378c <__sinit_lock_release>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__sinit_lock_release+0x8>)
 800378e:	f000 b8a2 	b.w	80038d6 <__retarget_lock_release_recursive>
 8003792:	bf00      	nop
 8003794:	20016a17 	.word	0x20016a17

08003798 <__sinit>:
 8003798:	b510      	push	{r4, lr}
 800379a:	4604      	mov	r4, r0
 800379c:	f7ff fff0 	bl	8003780 <__sinit_lock_acquire>
 80037a0:	69a3      	ldr	r3, [r4, #24]
 80037a2:	b11b      	cbz	r3, 80037ac <__sinit+0x14>
 80037a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a8:	f7ff bff0 	b.w	800378c <__sinit_lock_release>
 80037ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037b0:	6523      	str	r3, [r4, #80]	; 0x50
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <__sinit+0x68>)
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <__sinit+0x6c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80037ba:	42a3      	cmp	r3, r4
 80037bc:	bf04      	itt	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	61a3      	streq	r3, [r4, #24]
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 f820 	bl	8003808 <__sfp>
 80037c8:	6060      	str	r0, [r4, #4]
 80037ca:	4620      	mov	r0, r4
 80037cc:	f000 f81c 	bl	8003808 <__sfp>
 80037d0:	60a0      	str	r0, [r4, #8]
 80037d2:	4620      	mov	r0, r4
 80037d4:	f000 f818 	bl	8003808 <__sfp>
 80037d8:	2200      	movs	r2, #0
 80037da:	60e0      	str	r0, [r4, #12]
 80037dc:	2104      	movs	r1, #4
 80037de:	6860      	ldr	r0, [r4, #4]
 80037e0:	f7ff ff82 	bl	80036e8 <std>
 80037e4:	68a0      	ldr	r0, [r4, #8]
 80037e6:	2201      	movs	r2, #1
 80037e8:	2109      	movs	r1, #9
 80037ea:	f7ff ff7d 	bl	80036e8 <std>
 80037ee:	68e0      	ldr	r0, [r4, #12]
 80037f0:	2202      	movs	r2, #2
 80037f2:	2112      	movs	r1, #18
 80037f4:	f7ff ff78 	bl	80036e8 <std>
 80037f8:	2301      	movs	r3, #1
 80037fa:	61a3      	str	r3, [r4, #24]
 80037fc:	e7d2      	b.n	80037a4 <__sinit+0xc>
 80037fe:	bf00      	nop
 8003800:	08003ce4 	.word	0x08003ce4
 8003804:	08003731 	.word	0x08003731

08003808 <__sfp>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	4607      	mov	r7, r0
 800380c:	f7ff ffac 	bl	8003768 <__sfp_lock_acquire>
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <__sfp+0x84>)
 8003812:	681e      	ldr	r6, [r3, #0]
 8003814:	69b3      	ldr	r3, [r6, #24]
 8003816:	b913      	cbnz	r3, 800381e <__sfp+0x16>
 8003818:	4630      	mov	r0, r6
 800381a:	f7ff ffbd 	bl	8003798 <__sinit>
 800381e:	3648      	adds	r6, #72	; 0x48
 8003820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003824:	3b01      	subs	r3, #1
 8003826:	d503      	bpl.n	8003830 <__sfp+0x28>
 8003828:	6833      	ldr	r3, [r6, #0]
 800382a:	b30b      	cbz	r3, 8003870 <__sfp+0x68>
 800382c:	6836      	ldr	r6, [r6, #0]
 800382e:	e7f7      	b.n	8003820 <__sfp+0x18>
 8003830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003834:	b9d5      	cbnz	r5, 800386c <__sfp+0x64>
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <__sfp+0x88>)
 8003838:	60e3      	str	r3, [r4, #12]
 800383a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800383e:	6665      	str	r5, [r4, #100]	; 0x64
 8003840:	f000 f847 	bl	80038d2 <__retarget_lock_init_recursive>
 8003844:	f7ff ff96 	bl	8003774 <__sfp_lock_release>
 8003848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800384c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003850:	6025      	str	r5, [r4, #0]
 8003852:	61a5      	str	r5, [r4, #24]
 8003854:	2208      	movs	r2, #8
 8003856:	4629      	mov	r1, r5
 8003858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800385c:	f7ff fd44 	bl	80032e8 <memset>
 8003860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003868:	4620      	mov	r0, r4
 800386a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800386c:	3468      	adds	r4, #104	; 0x68
 800386e:	e7d9      	b.n	8003824 <__sfp+0x1c>
 8003870:	2104      	movs	r1, #4
 8003872:	4638      	mov	r0, r7
 8003874:	f7ff ff62 	bl	800373c <__sfmoreglue>
 8003878:	4604      	mov	r4, r0
 800387a:	6030      	str	r0, [r6, #0]
 800387c:	2800      	cmp	r0, #0
 800387e:	d1d5      	bne.n	800382c <__sfp+0x24>
 8003880:	f7ff ff78 	bl	8003774 <__sfp_lock_release>
 8003884:	230c      	movs	r3, #12
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	e7ee      	b.n	8003868 <__sfp+0x60>
 800388a:	bf00      	nop
 800388c:	08003ce4 	.word	0x08003ce4
 8003890:	ffff0001 	.word	0xffff0001

08003894 <_fwalk_reent>:
 8003894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003898:	4606      	mov	r6, r0
 800389a:	4688      	mov	r8, r1
 800389c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038a0:	2700      	movs	r7, #0
 80038a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038a6:	f1b9 0901 	subs.w	r9, r9, #1
 80038aa:	d505      	bpl.n	80038b8 <_fwalk_reent+0x24>
 80038ac:	6824      	ldr	r4, [r4, #0]
 80038ae:	2c00      	cmp	r4, #0
 80038b0:	d1f7      	bne.n	80038a2 <_fwalk_reent+0xe>
 80038b2:	4638      	mov	r0, r7
 80038b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b8:	89ab      	ldrh	r3, [r5, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d907      	bls.n	80038ce <_fwalk_reent+0x3a>
 80038be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038c2:	3301      	adds	r3, #1
 80038c4:	d003      	beq.n	80038ce <_fwalk_reent+0x3a>
 80038c6:	4629      	mov	r1, r5
 80038c8:	4630      	mov	r0, r6
 80038ca:	47c0      	blx	r8
 80038cc:	4307      	orrs	r7, r0
 80038ce:	3568      	adds	r5, #104	; 0x68
 80038d0:	e7e9      	b.n	80038a6 <_fwalk_reent+0x12>

080038d2 <__retarget_lock_init_recursive>:
 80038d2:	4770      	bx	lr

080038d4 <__retarget_lock_acquire_recursive>:
 80038d4:	4770      	bx	lr

080038d6 <__retarget_lock_release_recursive>:
 80038d6:	4770      	bx	lr

080038d8 <__swhatbuf_r>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	460e      	mov	r6, r1
 80038dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e0:	2900      	cmp	r1, #0
 80038e2:	b096      	sub	sp, #88	; 0x58
 80038e4:	4614      	mov	r4, r2
 80038e6:	461d      	mov	r5, r3
 80038e8:	da07      	bge.n	80038fa <__swhatbuf_r+0x22>
 80038ea:	2300      	movs	r3, #0
 80038ec:	602b      	str	r3, [r5, #0]
 80038ee:	89b3      	ldrh	r3, [r6, #12]
 80038f0:	061a      	lsls	r2, r3, #24
 80038f2:	d410      	bmi.n	8003916 <__swhatbuf_r+0x3e>
 80038f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f8:	e00e      	b.n	8003918 <__swhatbuf_r+0x40>
 80038fa:	466a      	mov	r2, sp
 80038fc:	f000 f970 	bl	8003be0 <_fstat_r>
 8003900:	2800      	cmp	r0, #0
 8003902:	dbf2      	blt.n	80038ea <__swhatbuf_r+0x12>
 8003904:	9a01      	ldr	r2, [sp, #4]
 8003906:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800390a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800390e:	425a      	negs	r2, r3
 8003910:	415a      	adcs	r2, r3
 8003912:	602a      	str	r2, [r5, #0]
 8003914:	e7ee      	b.n	80038f4 <__swhatbuf_r+0x1c>
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	2000      	movs	r0, #0
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	b016      	add	sp, #88	; 0x58
 800391e:	bd70      	pop	{r4, r5, r6, pc}

08003920 <__smakebuf_r>:
 8003920:	898b      	ldrh	r3, [r1, #12]
 8003922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003924:	079d      	lsls	r5, r3, #30
 8003926:	4606      	mov	r6, r0
 8003928:	460c      	mov	r4, r1
 800392a:	d507      	bpl.n	800393c <__smakebuf_r+0x1c>
 800392c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	2301      	movs	r3, #1
 8003936:	6163      	str	r3, [r4, #20]
 8003938:	b002      	add	sp, #8
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	ab01      	add	r3, sp, #4
 800393e:	466a      	mov	r2, sp
 8003940:	f7ff ffca 	bl	80038d8 <__swhatbuf_r>
 8003944:	9900      	ldr	r1, [sp, #0]
 8003946:	4605      	mov	r5, r0
 8003948:	4630      	mov	r0, r6
 800394a:	f000 f879 	bl	8003a40 <_malloc_r>
 800394e:	b948      	cbnz	r0, 8003964 <__smakebuf_r+0x44>
 8003950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003954:	059a      	lsls	r2, r3, #22
 8003956:	d4ef      	bmi.n	8003938 <__smakebuf_r+0x18>
 8003958:	f023 0303 	bic.w	r3, r3, #3
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	81a3      	strh	r3, [r4, #12]
 8003962:	e7e3      	b.n	800392c <__smakebuf_r+0xc>
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <__smakebuf_r+0x7c>)
 8003966:	62b3      	str	r3, [r6, #40]	; 0x28
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	6020      	str	r0, [r4, #0]
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	81a3      	strh	r3, [r4, #12]
 8003972:	9b00      	ldr	r3, [sp, #0]
 8003974:	6163      	str	r3, [r4, #20]
 8003976:	9b01      	ldr	r3, [sp, #4]
 8003978:	6120      	str	r0, [r4, #16]
 800397a:	b15b      	cbz	r3, 8003994 <__smakebuf_r+0x74>
 800397c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f93f 	bl	8003c04 <_isatty_r>
 8003986:	b128      	cbz	r0, 8003994 <__smakebuf_r+0x74>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	89a0      	ldrh	r0, [r4, #12]
 8003996:	4305      	orrs	r5, r0
 8003998:	81a5      	strh	r5, [r4, #12]
 800399a:	e7cd      	b.n	8003938 <__smakebuf_r+0x18>
 800399c:	08003731 	.word	0x08003731

080039a0 <_free_r>:
 80039a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039a2:	2900      	cmp	r1, #0
 80039a4:	d048      	beq.n	8003a38 <_free_r+0x98>
 80039a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039aa:	9001      	str	r0, [sp, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f1a1 0404 	sub.w	r4, r1, #4
 80039b2:	bfb8      	it	lt
 80039b4:	18e4      	addlt	r4, r4, r3
 80039b6:	f000 f947 	bl	8003c48 <__malloc_lock>
 80039ba:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <_free_r+0x9c>)
 80039bc:	9801      	ldr	r0, [sp, #4]
 80039be:	6813      	ldr	r3, [r2, #0]
 80039c0:	4615      	mov	r5, r2
 80039c2:	b933      	cbnz	r3, 80039d2 <_free_r+0x32>
 80039c4:	6063      	str	r3, [r4, #4]
 80039c6:	6014      	str	r4, [r2, #0]
 80039c8:	b003      	add	sp, #12
 80039ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039ce:	f000 b941 	b.w	8003c54 <__malloc_unlock>
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	d90b      	bls.n	80039ee <_free_r+0x4e>
 80039d6:	6821      	ldr	r1, [r4, #0]
 80039d8:	1862      	adds	r2, r4, r1
 80039da:	4293      	cmp	r3, r2
 80039dc:	bf04      	itt	eq
 80039de:	681a      	ldreq	r2, [r3, #0]
 80039e0:	685b      	ldreq	r3, [r3, #4]
 80039e2:	6063      	str	r3, [r4, #4]
 80039e4:	bf04      	itt	eq
 80039e6:	1852      	addeq	r2, r2, r1
 80039e8:	6022      	streq	r2, [r4, #0]
 80039ea:	602c      	str	r4, [r5, #0]
 80039ec:	e7ec      	b.n	80039c8 <_free_r+0x28>
 80039ee:	461a      	mov	r2, r3
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b10b      	cbz	r3, 80039f8 <_free_r+0x58>
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	d9fa      	bls.n	80039ee <_free_r+0x4e>
 80039f8:	6811      	ldr	r1, [r2, #0]
 80039fa:	1855      	adds	r5, r2, r1
 80039fc:	42a5      	cmp	r5, r4
 80039fe:	d10b      	bne.n	8003a18 <_free_r+0x78>
 8003a00:	6824      	ldr	r4, [r4, #0]
 8003a02:	4421      	add	r1, r4
 8003a04:	1854      	adds	r4, r2, r1
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	6011      	str	r1, [r2, #0]
 8003a0a:	d1dd      	bne.n	80039c8 <_free_r+0x28>
 8003a0c:	681c      	ldr	r4, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	6053      	str	r3, [r2, #4]
 8003a12:	4421      	add	r1, r4
 8003a14:	6011      	str	r1, [r2, #0]
 8003a16:	e7d7      	b.n	80039c8 <_free_r+0x28>
 8003a18:	d902      	bls.n	8003a20 <_free_r+0x80>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	6003      	str	r3, [r0, #0]
 8003a1e:	e7d3      	b.n	80039c8 <_free_r+0x28>
 8003a20:	6825      	ldr	r5, [r4, #0]
 8003a22:	1961      	adds	r1, r4, r5
 8003a24:	428b      	cmp	r3, r1
 8003a26:	bf04      	itt	eq
 8003a28:	6819      	ldreq	r1, [r3, #0]
 8003a2a:	685b      	ldreq	r3, [r3, #4]
 8003a2c:	6063      	str	r3, [r4, #4]
 8003a2e:	bf04      	itt	eq
 8003a30:	1949      	addeq	r1, r1, r5
 8003a32:	6021      	streq	r1, [r4, #0]
 8003a34:	6054      	str	r4, [r2, #4]
 8003a36:	e7c7      	b.n	80039c8 <_free_r+0x28>
 8003a38:	b003      	add	sp, #12
 8003a3a:	bd30      	pop	{r4, r5, pc}
 8003a3c:	200169c0 	.word	0x200169c0

08003a40 <_malloc_r>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	1ccd      	adds	r5, r1, #3
 8003a44:	f025 0503 	bic.w	r5, r5, #3
 8003a48:	3508      	adds	r5, #8
 8003a4a:	2d0c      	cmp	r5, #12
 8003a4c:	bf38      	it	cc
 8003a4e:	250c      	movcc	r5, #12
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	4606      	mov	r6, r0
 8003a54:	db01      	blt.n	8003a5a <_malloc_r+0x1a>
 8003a56:	42a9      	cmp	r1, r5
 8003a58:	d903      	bls.n	8003a62 <_malloc_r+0x22>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	2000      	movs	r0, #0
 8003a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a62:	f000 f8f1 	bl	8003c48 <__malloc_lock>
 8003a66:	4921      	ldr	r1, [pc, #132]	; (8003aec <_malloc_r+0xac>)
 8003a68:	680a      	ldr	r2, [r1, #0]
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	b99c      	cbnz	r4, 8003a96 <_malloc_r+0x56>
 8003a6e:	4f20      	ldr	r7, [pc, #128]	; (8003af0 <_malloc_r+0xb0>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	b923      	cbnz	r3, 8003a7e <_malloc_r+0x3e>
 8003a74:	4621      	mov	r1, r4
 8003a76:	4630      	mov	r0, r6
 8003a78:	f000 f83c 	bl	8003af4 <_sbrk_r>
 8003a7c:	6038      	str	r0, [r7, #0]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4630      	mov	r0, r6
 8003a82:	f000 f837 	bl	8003af4 <_sbrk_r>
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	d123      	bne.n	8003ad2 <_malloc_r+0x92>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	6033      	str	r3, [r6, #0]
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f000 f8e0 	bl	8003c54 <__malloc_unlock>
 8003a94:	e7e3      	b.n	8003a5e <_malloc_r+0x1e>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	1b5b      	subs	r3, r3, r5
 8003a9a:	d417      	bmi.n	8003acc <_malloc_r+0x8c>
 8003a9c:	2b0b      	cmp	r3, #11
 8003a9e:	d903      	bls.n	8003aa8 <_malloc_r+0x68>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	441c      	add	r4, r3
 8003aa4:	6025      	str	r5, [r4, #0]
 8003aa6:	e004      	b.n	8003ab2 <_malloc_r+0x72>
 8003aa8:	6863      	ldr	r3, [r4, #4]
 8003aaa:	42a2      	cmp	r2, r4
 8003aac:	bf0c      	ite	eq
 8003aae:	600b      	streq	r3, [r1, #0]
 8003ab0:	6053      	strne	r3, [r2, #4]
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f000 f8ce 	bl	8003c54 <__malloc_unlock>
 8003ab8:	f104 000b 	add.w	r0, r4, #11
 8003abc:	1d23      	adds	r3, r4, #4
 8003abe:	f020 0007 	bic.w	r0, r0, #7
 8003ac2:	1ac2      	subs	r2, r0, r3
 8003ac4:	d0cc      	beq.n	8003a60 <_malloc_r+0x20>
 8003ac6:	1a1b      	subs	r3, r3, r0
 8003ac8:	50a3      	str	r3, [r4, r2]
 8003aca:	e7c9      	b.n	8003a60 <_malloc_r+0x20>
 8003acc:	4622      	mov	r2, r4
 8003ace:	6864      	ldr	r4, [r4, #4]
 8003ad0:	e7cc      	b.n	8003a6c <_malloc_r+0x2c>
 8003ad2:	1cc4      	adds	r4, r0, #3
 8003ad4:	f024 0403 	bic.w	r4, r4, #3
 8003ad8:	42a0      	cmp	r0, r4
 8003ada:	d0e3      	beq.n	8003aa4 <_malloc_r+0x64>
 8003adc:	1a21      	subs	r1, r4, r0
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 f808 	bl	8003af4 <_sbrk_r>
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d1dd      	bne.n	8003aa4 <_malloc_r+0x64>
 8003ae8:	e7cf      	b.n	8003a8a <_malloc_r+0x4a>
 8003aea:	bf00      	nop
 8003aec:	200169c0 	.word	0x200169c0
 8003af0:	200169c4 	.word	0x200169c4

08003af4 <_sbrk_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4d06      	ldr	r5, [pc, #24]	; (8003b10 <_sbrk_r+0x1c>)
 8003af8:	2300      	movs	r3, #0
 8003afa:	4604      	mov	r4, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7fd f868 	bl	8000bd4 <_sbrk>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_sbrk_r+0x1a>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_sbrk_r+0x1a>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	20016a20 	.word	0x20016a20

08003b14 <__sread>:
 8003b14:	b510      	push	{r4, lr}
 8003b16:	460c      	mov	r4, r1
 8003b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1c:	f000 f8a0 	bl	8003c60 <_read_r>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	bfab      	itete	ge
 8003b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b26:	89a3      	ldrhlt	r3, [r4, #12]
 8003b28:	181b      	addge	r3, r3, r0
 8003b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b2e:	bfac      	ite	ge
 8003b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b32:	81a3      	strhlt	r3, [r4, #12]
 8003b34:	bd10      	pop	{r4, pc}

08003b36 <__swrite>:
 8003b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3a:	461f      	mov	r7, r3
 8003b3c:	898b      	ldrh	r3, [r1, #12]
 8003b3e:	05db      	lsls	r3, r3, #23
 8003b40:	4605      	mov	r5, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	4616      	mov	r6, r2
 8003b46:	d505      	bpl.n	8003b54 <__swrite+0x1e>
 8003b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f000 f868 	bl	8003c24 <_lseek_r>
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b5e:	81a3      	strh	r3, [r4, #12]
 8003b60:	4632      	mov	r2, r6
 8003b62:	463b      	mov	r3, r7
 8003b64:	4628      	mov	r0, r5
 8003b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6a:	f000 b817 	b.w	8003b9c <_write_r>

08003b6e <__sseek>:
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	460c      	mov	r4, r1
 8003b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b76:	f000 f855 	bl	8003c24 <_lseek_r>
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	bf15      	itete	ne
 8003b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b8a:	81a3      	strheq	r3, [r4, #12]
 8003b8c:	bf18      	it	ne
 8003b8e:	81a3      	strhne	r3, [r4, #12]
 8003b90:	bd10      	pop	{r4, pc}

08003b92 <__sclose>:
 8003b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b96:	f000 b813 	b.w	8003bc0 <_close_r>
	...

08003b9c <_write_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d07      	ldr	r5, [pc, #28]	; (8003bbc <_write_r+0x20>)
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	602a      	str	r2, [r5, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7fc ffc1 	bl	8000b32 <_write>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_write_r+0x1e>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_write_r+0x1e>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	20016a20 	.word	0x20016a20

08003bc0 <_close_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4d06      	ldr	r5, [pc, #24]	; (8003bdc <_close_r+0x1c>)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	f7fc ffcd 	bl	8000b6a <_close>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d102      	bne.n	8003bda <_close_r+0x1a>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	b103      	cbz	r3, 8003bda <_close_r+0x1a>
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	20016a20 	.word	0x20016a20

08003be0 <_fstat_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d07      	ldr	r5, [pc, #28]	; (8003c00 <_fstat_r+0x20>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	602b      	str	r3, [r5, #0]
 8003bee:	f7fc ffc8 	bl	8000b82 <_fstat>
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	d102      	bne.n	8003bfc <_fstat_r+0x1c>
 8003bf6:	682b      	ldr	r3, [r5, #0]
 8003bf8:	b103      	cbz	r3, 8003bfc <_fstat_r+0x1c>
 8003bfa:	6023      	str	r3, [r4, #0]
 8003bfc:	bd38      	pop	{r3, r4, r5, pc}
 8003bfe:	bf00      	nop
 8003c00:	20016a20 	.word	0x20016a20

08003c04 <_isatty_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d06      	ldr	r5, [pc, #24]	; (8003c20 <_isatty_r+0x1c>)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	f7fc ffc7 	bl	8000ba2 <_isatty>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_isatty_r+0x1a>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_isatty_r+0x1a>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	20016a20 	.word	0x20016a20

08003c24 <_lseek_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4d07      	ldr	r5, [pc, #28]	; (8003c44 <_lseek_r+0x20>)
 8003c28:	4604      	mov	r4, r0
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	2200      	movs	r2, #0
 8003c30:	602a      	str	r2, [r5, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f7fc ffc0 	bl	8000bb8 <_lseek>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d102      	bne.n	8003c42 <_lseek_r+0x1e>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	b103      	cbz	r3, 8003c42 <_lseek_r+0x1e>
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20016a20 	.word	0x20016a20

08003c48 <__malloc_lock>:
 8003c48:	4801      	ldr	r0, [pc, #4]	; (8003c50 <__malloc_lock+0x8>)
 8003c4a:	f7ff be43 	b.w	80038d4 <__retarget_lock_acquire_recursive>
 8003c4e:	bf00      	nop
 8003c50:	20016a18 	.word	0x20016a18

08003c54 <__malloc_unlock>:
 8003c54:	4801      	ldr	r0, [pc, #4]	; (8003c5c <__malloc_unlock+0x8>)
 8003c56:	f7ff be3e 	b.w	80038d6 <__retarget_lock_release_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	20016a18 	.word	0x20016a18

08003c60 <_read_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d07      	ldr	r5, [pc, #28]	; (8003c80 <_read_r+0x20>)
 8003c64:	4604      	mov	r4, r0
 8003c66:	4608      	mov	r0, r1
 8003c68:	4611      	mov	r1, r2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	602a      	str	r2, [r5, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f7fc ff42 	bl	8000af8 <_read>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_read_r+0x1e>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_read_r+0x1e>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	20016a20 	.word	0x20016a20

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
